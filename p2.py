"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


# так как при целочисленном делении на 10 будет "отметаться" последнее число - я написал такую рекурсию

def evens_and_odds(n, even, odd):
    if n == 0:
        return f"The number of even and odd digits in a number is: ({str(even)}, {str(odd)})"
    else:
        if n % 2 == 0:
            even += 1
        else:
            odd += 1
    return evens_and_odds(n // 10, even, odd)


try:
    numb = int(input("Input the number: "))
except ValueError:
    print("Wrong input for number! Try again")
else:
    print(evens_and_odds(numb, 0, 0))
